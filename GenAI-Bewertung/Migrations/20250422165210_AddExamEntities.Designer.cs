// <auto-generated />
using System;
using System.Collections.Generic;
using GenAI_Bewertung.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GenAIBewertung.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250422165210_AddExamEntities")]
    partial class AddExamEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GenAI_Bewertung.Entities.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AnswerId"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SubmittedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("AnswerId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("GenAI_Bewertung.Entities.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExamId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TimeLimitMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ExamId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("GenAI_Bewertung.Entities.ExamQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ExamId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ExamQuestions");
                });

            modelBuilder.Entity("GenAI_Bewertung.Entities.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QuestionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuestionType")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("QuestionId");

                    b.ToTable("Questions", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("GenAI_Bewertung.Entities.QuestionTypes.BlankGap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FillInTheBlankQuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<List<string>>("Solutions")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("FillInTheBlankQuestionId");

                    b.ToTable("BlankGaps", (string)null);
                });

            modelBuilder.Entity("GenAI_Bewertung.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GenAI_Bewertung.Entities.QuestionTypes.EitherOrQuestion", b =>
                {
                    b.HasBaseType("GenAI_Bewertung.Entities.Question");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OptionA")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OptionB")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("EitherOrQuestions", (string)null);
                });

            modelBuilder.Entity("GenAI_Bewertung.Entities.QuestionTypes.EstimationQuestion", b =>
                {
                    b.HasBaseType("GenAI_Bewertung.Entities.Question");

                    b.Property<double>("CorrectValue")
                        .HasColumnType("double precision");

                    b.ToTable("EstimationQuestions", (string)null);
                });

            modelBuilder.Entity("GenAI_Bewertung.Entities.QuestionTypes.FillInTheBlankQuestion", b =>
                {
                    b.HasBaseType("GenAI_Bewertung.Entities.Question");

                    b.Property<string>("ClozeText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("FillInTheBlankQuestions", (string)null);
                });

            modelBuilder.Entity("GenAI_Bewertung.Entities.QuestionTypes.FreeTextQuestion", b =>
                {
                    b.HasBaseType("GenAI_Bewertung.Entities.Question");

                    b.Property<string>("ExpectedKeywords")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("FreeTextQuestions", (string)null);
                });

            modelBuilder.Entity("GenAI_Bewertung.Entities.QuestionTypes.MathQuestion", b =>
                {
                    b.HasBaseType("GenAI_Bewertung.Entities.Question");

                    b.Property<double>("ExpectedResult")
                        .HasColumnType("double precision");

                    b.ToTable("MathQuestions", (string)null);
                });

            modelBuilder.Entity("GenAI_Bewertung.Entities.QuestionTypes.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("GenAI_Bewertung.Entities.Question");

                    b.Property<List<string>>("Choices")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<int>>("CorrectIndices")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.ToTable("MultipleChoiceQuestions", (string)null);
                });

            modelBuilder.Entity("GenAI_Bewertung.Entities.QuestionTypes.OneWordQuestion", b =>
                {
                    b.HasBaseType("GenAI_Bewertung.Entities.Question");

                    b.Property<string>("ExpectedAnswer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("OneWordQuestions", (string)null);
                });

            modelBuilder.Entity("GenAI_Bewertung.Entities.ExamQuestion", b =>
                {
                    b.HasOne("GenAI_Bewertung.Entities.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenAI_Bewertung.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("GenAI_Bewertung.Entities.QuestionTypes.BlankGap", b =>
                {
                    b.HasOne("GenAI_Bewertung.Entities.QuestionTypes.FillInTheBlankQuestion", "FillInTheBlankQuestion")
                        .WithMany("Gaps")
                        .HasForeignKey("FillInTheBlankQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FillInTheBlankQuestion");
                });

            modelBuilder.Entity("GenAI_Bewertung.Entities.QuestionTypes.EitherOrQuestion", b =>
                {
                    b.HasOne("GenAI_Bewertung.Entities.Question", null)
                        .WithOne()
                        .HasForeignKey("GenAI_Bewertung.Entities.QuestionTypes.EitherOrQuestion", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenAI_Bewertung.Entities.QuestionTypes.EstimationQuestion", b =>
                {
                    b.HasOne("GenAI_Bewertung.Entities.Question", null)
                        .WithOne()
                        .HasForeignKey("GenAI_Bewertung.Entities.QuestionTypes.EstimationQuestion", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenAI_Bewertung.Entities.QuestionTypes.FillInTheBlankQuestion", b =>
                {
                    b.HasOne("GenAI_Bewertung.Entities.Question", null)
                        .WithOne()
                        .HasForeignKey("GenAI_Bewertung.Entities.QuestionTypes.FillInTheBlankQuestion", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenAI_Bewertung.Entities.QuestionTypes.FreeTextQuestion", b =>
                {
                    b.HasOne("GenAI_Bewertung.Entities.Question", null)
                        .WithOne()
                        .HasForeignKey("GenAI_Bewertung.Entities.QuestionTypes.FreeTextQuestion", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenAI_Bewertung.Entities.QuestionTypes.MathQuestion", b =>
                {
                    b.HasOne("GenAI_Bewertung.Entities.Question", null)
                        .WithOne()
                        .HasForeignKey("GenAI_Bewertung.Entities.QuestionTypes.MathQuestion", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenAI_Bewertung.Entities.QuestionTypes.MultipleChoiceQuestion", b =>
                {
                    b.HasOne("GenAI_Bewertung.Entities.Question", null)
                        .WithOne()
                        .HasForeignKey("GenAI_Bewertung.Entities.QuestionTypes.MultipleChoiceQuestion", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenAI_Bewertung.Entities.QuestionTypes.OneWordQuestion", b =>
                {
                    b.HasOne("GenAI_Bewertung.Entities.Question", null)
                        .WithOne()
                        .HasForeignKey("GenAI_Bewertung.Entities.QuestionTypes.OneWordQuestion", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenAI_Bewertung.Entities.Exam", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("GenAI_Bewertung.Entities.QuestionTypes.FillInTheBlankQuestion", b =>
                {
                    b.Navigation("Gaps");
                });
#pragma warning restore 612, 618
        }
    }
}
